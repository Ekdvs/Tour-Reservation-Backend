Index: online-travel-planning-backend/src/main/java/com/online/travel/planning/online/travel/planning/backend/Controller/UserController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.online.travel.planning.online.travel.planning.backend.Controller;\r\nimport com.online.travel.planning.online.travel.planning.backend.Model.User;\r\nimport com.online.travel.planning.online.travel.planning.backend.Repository.UserRepository;\r\nimport com.online.travel.planning.online.travel.planning.backend.Service.UserService;\r\nimport jakarta.mail.MessagingException;\r\nimport jakarta.servlet.http.HttpSession;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.List;\r\nimport java.util.Map;\r\n@RestController\r\n@CrossOrigin(\"http://localhost:3000\")\r\n@RequestMapping(\"/user\")\r\n\r\npublic class UserController {\r\n    @Autowired\r\n    private UserService userService;\r\n\r\n    @Autowired\r\n    private UserRepository userRepository;\r\n\r\n    // Create a new user\r\n    @PostMapping(\"/addUser\")\r\n    public ResponseEntity<User> createUser(@RequestBody User user) throws MessagingException {\r\n        User createdUser = userService.createUser(user);\r\n        return ResponseEntity.ok(createdUser);\r\n    }\r\n    // Get user by ID\r\n    @GetMapping(\"/getUserById/{id}\")\r\n    public ResponseEntity<User> getUserById(@PathVariable(\"id\") String userId) {\r\n        User user = userService.getUserById(userId);\r\n        return ResponseEntity.ok(user);\r\n    }\r\n    @GetMapping(\"/getUserNameByID/{id}\")\r\n    public String getUsernameById(@PathVariable(\"id\") String userId) {\r\n        User user = userService.getUserNameById(userId);\r\n        String userName=user.getFirstName();\r\n        return userName;\r\n    }\r\n    @GetMapping(\"/getUserByEmail/{id}\")\r\n    public User getUserByEmail(@PathVariable(\"id\") String userEmail) {\r\n        return userService.getUserByUserEmail(userEmail);\r\n    }\r\n\r\n    // Get all users\r\n    @GetMapping(\"/allUsers\")\r\n    public List<User> getAllUsers() {\r\n        return userService.getAllUsers();\r\n    }\r\n    // Delete user by ID\r\n    @DeleteMapping(\"/delete/{id}\")\r\n    public ResponseEntity<String> deleteUser(@PathVariable(\"id\") String userId) {\r\n        userService.deleteUser(userId);\r\n        return ResponseEntity.ok(\"User with ID \" + userId + \" has been deleted successfully.\");\r\n    }\r\n\r\n    @PostMapping(\"/login\")\r\n    public String login(@RequestBody User user, HttpSession session) {\r\n        User existingUser = userRepository.findByUserEmail(user.getUserEmail());\r\n        if (existingUser != null && existingUser.getPassword().equals(user.getPassword())) {\r\n            session.setAttribute(\"user\", user);\r\n            return \"Login successful\";\r\n        } else {\r\n            return \"Invalid username or password\";\r\n        }\r\n    }\r\n    @PostMapping(\"/logout\")\r\n    public String logout(HttpSession session) {\r\n        session.invalidate();\r\n        return \"Logged out successfully\";\r\n    }\r\n    @PostMapping(\"/register\")\r\n    public String register(@RequestBody User user) {\r\n        if (userRepository.findByUserEmail(user.getUserEmail()) != null) {\r\n            return \"User already registered as a user\";\r\n        }\r\n        userRepository.save(user);\r\n        return \"User registered successfully\";\r\n    }\r\n\r\n    @PostMapping(\"/send-code\")\r\n    public String sendRecoveryCode(@RequestBody Map<String, String> payload) {\r\n        String userEmail = payload.get(\"userEmail\");\r\n        if (userEmail == null || userEmail.isBlank()) {\r\n            throw new RuntimeException(\"Email cannot be empty.\");\r\n        }\r\n        return userService.sendRecoveryCode(userEmail);\r\n    }\r\n\r\n    @PostMapping(\"/verify-code\")\r\n    public boolean verifyRecoveryCode(@RequestParam String userEmail, @RequestParam String recoveryCode) {\r\n        return userService.verifyRecoveryCode(userEmail, recoveryCode);\r\n    }\r\n\r\n    @PostMapping(\"/update-password\")\r\n    public User updatePassword(@RequestParam String userEmail, @RequestParam String newPassword) {\r\n        return userService.updatePassword(userEmail, newPassword);\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/online-travel-planning-backend/src/main/java/com/online/travel/planning/online/travel/planning/backend/Controller/UserController.java b/online-travel-planning-backend/src/main/java/com/online/travel/planning/online/travel/planning/backend/Controller/UserController.java
--- a/online-travel-planning-backend/src/main/java/com/online/travel/planning/online/travel/planning/backend/Controller/UserController.java	(revision e620674bcbb69a150e30a9d7e3ec9979b293e3c6)
+++ b/online-travel-planning-backend/src/main/java/com/online/travel/planning/online/travel/planning/backend/Controller/UserController.java	(date 1734187409757)
@@ -97,7 +97,7 @@
     @PostMapping("/update-password")
     public User updatePassword(@RequestParam String userEmail, @RequestParam String newPassword) {
         return userService.updatePassword(userEmail, newPassword);
-    }
+}
 
 
 
